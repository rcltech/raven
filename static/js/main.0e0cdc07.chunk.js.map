{"version":3,"sources":["gql/users.js","functions/redirectToLogin.js","components/Loading.js","App.js","serviceWorker.js","index.js"],"names":["GET_ME","gql","redirectToLogin","url","window","location","replace","useStyles","makeStyles","loading","position","top","left","margin","size","Loading","classes","theme","useTheme","className","type","color","palette","primary","main","height","width","App","useQuery","meLoading","meError","error","userData","data","console","log","me","username","first_name","last_name","Boolean","hostname","match","ReactDOM","render","useState","undefined","client","setClient","useEffect","authorization","localStorage","getItem","link","HttpLink","uri","headers","cache","InMemoryCache","writeData","ApolloClient","persistCache","storage","sessionStorage","then","returnedId","qs","parse","search","length","setItem","id","isIdEmpty","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gZAEO,IAAMA,EAASC,YAAH,KCFNC,EAAkB,WAC7B,IACIC,EAAG,mDADS,sBAMhBC,OAAOC,SAASC,QAAQH,I,mDCApBI,EAAYC,IAAW,CAC3BC,QAAS,CACPC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,OAAO,IAAD,OAAMC,GAAN,uBAA6BA,GAA7B,SAIGC,EAAU,WACrB,IAAMC,EAAUT,IACVU,EAAQC,MACd,OACE,kBAAC,IAAD,CACEC,UAAWH,EAAQP,QACnBW,KAAK,QACLC,MAAOJ,EAAMK,QAAQC,QAAQC,KAC7BC,OAnBO,GAoBPC,MApBO,MCEAC,EAAM,WAAO,IAAD,EACwCC,YAC7D5B,GADe6B,EADM,EACfpB,QAA2BqB,EADZ,EACKC,MAAsBC,EAD3B,EACqBC,KAI5C,GAAIJ,EACF,OAAO,kBAAC,EAAD,MAKT,GAFIC,GAASI,QAAQC,IAAIL,IAEpBE,IAAaA,EAASI,GACzB,OAAOlC,IAZc,MAiBnB8B,EADFI,GAAMC,EAhBe,EAgBfA,SAAUC,EAhBK,EAgBLA,WAAYC,EAhBP,EAgBOA,UAG9B,OACE,gEACwBD,EADxB,YACsCC,EADtC,wBAC+DF,EAD/D,QCfgBG,QACW,cAA7BpC,OAAOC,SAASoC,UAEe,UAA7BrC,OAAOC,SAASoC,UAEhBrC,OAAOC,SAASoC,SAASC,MACvB,2DCoDNC,IAASC,OAAO,mBA1DF,WAAO,IAAD,EACUC,wBAASC,GADnB,mBACXC,EADW,KACHC,EADG,KAGlBC,qBAAU,WACR,IAAMC,EAAgBC,aAAaC,QAAQ,MAKrCC,EAAO,IAAIC,IAAS,CACxBC,IAFI,sCAGJC,QAAS,CACPN,mBAIEO,EAAQ,IAAIC,IAClBD,EAAME,UAAU,CACd1B,KAAM,KAGR,IAAMc,EAAS,IAAIa,IAAa,CAC9BH,QACAJ,SAGFQ,uBAAa,CACXJ,QACAK,QAAS1D,OAAO2D,iBACfC,MAAK,kBAAMhB,EAAUD,QACvB,IAEH,IAKMkB,EAAaC,IAAGC,MAAM/D,OAAOC,SAAS+D,QAAzB,GAMnB,OALIH,GAAcA,EAAWI,OAAS,IACpClB,aAAamB,QAAQ,KAAML,GAC3B7D,OAAOC,SAASC,QAAQ,MARR,WAChB,IAAMiE,EAAKpB,aAAaC,QAAQ,MAChC,MAAc,KAAPmB,GAAoB,OAAPA,QAAsBzB,IAAPyB,EASjCC,GACKtE,IAGJ6C,EAKH,kBAAC,IAAD,CAAgBA,OAAQA,GACtB,kBAAC,EAAD,OALK,kBAAC,EAAD,QAUK,MAAW0B,SAASC,eAAe,SD6D7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMb,MAAK,SAAAc,GACjCA,EAAaC,iB","file":"static/js/main.0e0cdc07.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nexport const GET_ME = gql`\n  query me {\n    me {\n      username\n      first_name\n      last_name\n    }\n  }\n`;\n","export const redirectToLogin = () => {\n  const app_url = 'events.rctech.club';\n  let url = `https://ladybird.rctech.club/?redirectTo=${app_url}`;\n  if (process.env.NODE_ENV === 'development') {\n    // local ladybird is hosted at port 3001, raven is hosted at 3000\n    url = `http://localhost:3001/?redirectTo=localhost:3000`;\n  }\n  window.location.replace(url);\n};\n","import React from 'react';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport Loader from 'react-loader-spinner';\n\nconst size = 80;\n\nconst useStyles = makeStyles({\n  loading: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    margin: `-${size / 2}px 0px 0px -${size / 2}px`\n  }\n});\n\nexport const Loading = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  return (\n    <Loader\n      className={classes.loading}\n      type=\"Watch\"\n      color={theme.palette.primary.main}\n      height={size}\n      width={size}\n    />\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_ME } from './gql/users';\nimport { redirectToLogin } from './functions/redirectToLogin';\nimport { Loading } from './components/Loading';\n\nexport const App = () => {\n  const { loading: meLoading, error: meError, data: userData } = useQuery(\n    GET_ME\n  );\n\n  if (meLoading) {\n    return <Loading />;\n  }\n\n  if (meError) console.log(meError);\n\n  if (!userData || !userData.me) {\n    return redirectToLogin();\n  }\n\n  const {\n    me: { username, first_name, last_name }\n  } = userData;\n\n  return (\n    <>\n      {`Welcome to raven, ${first_name} ${last_name} (username : ${username})!`}\n    </>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport qs from 'query-string';\nimport { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { persistCache } from 'apollo-cache-persist';\nimport './index.css';\nimport { App } from './App';\nimport { redirectToLogin } from './functions/redirectToLogin';\nimport { Loading } from './components/Loading';\nimport * as serviceWorker from './serviceWorker';\n\nconst Index = () => {\n  const [client, setClient] = useState(undefined);\n\n  useEffect(() => {\n    const authorization = localStorage.getItem('id');\n    const uri =\n      process.env.NODE_ENV === 'development'\n        ? 'http://localhost:4000/graphql'\n        : 'https://phoenix.rctech.club/graphql';\n    const link = new HttpLink({\n      uri,\n      headers: {\n        authorization\n      }\n    });\n\n    const cache = new InMemoryCache();\n    cache.writeData({\n      data: {}\n    });\n\n    const client = new ApolloClient({\n      cache,\n      link\n    });\n\n    persistCache({\n      cache,\n      storage: window.sessionStorage\n    }).then(() => setClient(client));\n  }, []);\n\n  const isIdEmpty = () => {\n    const id = localStorage.getItem('id');\n    return id === '' || id === null || id === undefined;\n  };\n\n  const returnedId = qs.parse(window.location.search)['id'];\n  if (returnedId && returnedId.length > 0) {\n    localStorage.setItem('id', returnedId);\n    window.location.replace('/');\n  }\n\n  if (isIdEmpty()) {\n    return redirectToLogin();\n  }\n\n  if (!client) {\n    return <Loading />;\n  }\n\n  return (\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  );\n};\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}