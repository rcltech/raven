{"version":3,"sources":["components/shared/Header.js","components/routes/homepage/MediaCard.js","components/shared/Loading.js","gql/events.js","gql/users.js","functions/redirectToLogin.js","components/shared/NewEventForm.js","components/routes/homepage/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","fontSize","background","backgroundSize","fontFamily","padding","color","width","display","justifyContent","alignItems","Header","classes","className","maxWidth","media","height","paddingTop","expansionPanel","lineHeight","marginBottom","MediaCard","event","title","start","end","venue","description","image_url","organiser","username","email","Card","CardActionArea","CardMedia","image","CardContent","Typography","variant","moment","format","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","id","ExpansionPanelDetails","loading","position","top","left","margin","size","Loading","theme","useTheme","type","palette","primary","main","GET_ALL_EVENTS","gql","GET_ME","redirectToLogin","url","window","location","replace","NewEventForm","useState","open","setOpen","Tooltip","onClick","placement","Fab","aria-label","Add","Dialog","onClose","DialogTitle","DialogContent","Grid","container","spacing","item","AccountCircle","TextField","label","defaultValue","multiline","rows","DialogActions","Button","autoFocus","Homepage","useQuery","meLoading","meError","error","userData","data","eventsLoading","eventsError","eventsData","console","log","me","events","map","key","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","undefined","client","setClient","useEffect","authorization","localStorage","getItem","link","HttpLink","uri","headers","cache","InMemoryCache","writeData","ApolloClient","persistCache","storage","sessionStorage","then","returnedId","qs","parse","search","length","setItem","isIdEmpty","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f0c9fcb.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    fontSize: '350%',\n    background: '#142850',\n    backgroundSize: 'cover',\n    fontFamily: \"'Merienda One', cursive\",\n    padding: '10px',\n    color: 'white',\n    width: '100vw',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nexport const Header = () => {\n  const classes = useStyles();\n  return <div className={classes.root}>Raven</div>;\n};\n","import React from 'react';\nimport moment from 'moment';\n\nimport {\n  Card,\n  CardActionArea,\n  CardMedia,\n  CardContent,\n  Typography,\n  makeStyles,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails\n} from '@material-ui/core';\n\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n    padding: '10px',\n    fontFamily: \"'Merriweather', serif\"\n  },\n  media: {\n    fontFamily: \"'Merriweather', serif\",\n    height: 0,\n    paddingTop: '56%'\n  },\n  expansionPanel: {\n    lineHeight: '0px',\n    marginBottom: '0px',\n    fontFamily: \"'Merriweather', serif\"\n  }\n});\n\nexport const MediaCard = ({ event }) => {\n  const classes = useStyles();\n  const {\n    title,\n    start,\n    end,\n    venue,\n    description,\n    image_url,\n    organiser: { username, email }\n  } = event;\n\n  return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia className={classes.media} image={image_url} title={title} />\n        <CardContent className={classes.root}>\n          <h4>{title}</h4>\n          <Typography variant={'body2'}>\n            Date:{' '}\n            {`${moment(start).format('lll')} - ${moment(end).format('lll')}`}{' '}\n            <br />\n            Venue: {venue} <br />\n            Contact: {`${username} (${email})`}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <ExpansionPanel className={classes.expansionPanel}>\n        <ExpansionPanelSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1a-content\"\n          id=\"panel1a-header\"\n        >\n          Learn More\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          <Typography>{description}</Typography>\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    </Card>\n  );\n};\n","import React from 'react';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport Loader from 'react-loader-spinner';\n\nconst size = 80;\n\nconst useStyles = makeStyles({\n  loading: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    margin: `-${size / 2}px 0px 0px -${size / 2}px`\n  }\n});\n\nexport const Loading = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  return (\n    <Loader\n      className={classes.loading}\n      type=\"Watch\"\n      color={theme.palette.primary.main}\n      height={size}\n      width={size}\n    />\n  );\n};\n","import { gql } from 'apollo-boost';\n\nexport const GET_ALL_EVENTS = gql`\n  query events {\n    events {\n      id\n      organiser {\n        id\n        username\n        email\n      }\n      title\n      start\n      end\n      venue\n      image_url\n      description\n    }\n  }\n`;\n","import { gql } from 'apollo-boost';\n\nexport const GET_ME = gql`\n  query me {\n    me {\n      username\n      first_name\n      last_name\n    }\n  }\n`;\n","export const redirectToLogin = () => {\n  const app_url = 'events.rctech.club';\n  let url = `https://ladybird.rctech.club/?redirectTo=${app_url}`;\n  if (process.env.NODE_ENV === 'development') {\n    // local ladybird is hosted at port 3001, raven is hosted at 3000\n    url = `http://localhost:3001/?redirectTo=localhost:3000`;\n  }\n  window.location.replace(url);\n};\n","import React, { useState } from 'react';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Fab,\n  Tooltip,\n  TextField,\n  Grid,\n  makeStyles\n} from '@material-ui/core';\nimport { AccountCircle, Add as AddIcon } from '@material-ui/icons';\n\nconst useStyles = makeStyles({\n  root: {\n    margin: '30%',\n    padding: '30%'\n  }\n});\n\nexport const NewEventForm = () => {\n  const [open, setOpen] = useState(false);\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Tooltip\n        title=\"Add New Event\"\n        onClick={() => setOpen(true)}\n        placement=\"right\"\n      >\n        <Fab color=\"primary\" aria-label=\"add\" className={classes.root}>\n          <AddIcon />\n        </Fab>\n      </Tooltip>\n\n      <Dialog open={open} onClose={() => setOpen(false)}>\n        <center>\n          <DialogTitle>Event Details</DialogTitle>\n        </center>\n        <DialogContent>\n          <Grid container spacing={1} alignItems=\"flex-end\">\n            <Grid item>\n              <AccountCircle />\n            </Grid>\n            <Grid item>\n              <TextField id=\"input-with-icon-grid\" label=\"With a grid\" />\n            </Grid>\n          </Grid>\n\n          <br />\n          <TextField\n            id=\"outlined-search\"\n            label=\"Event Name\"\n            type=\"Event Name\"\n            variant=\"outlined\"\n          />\n          <br />\n          <br />\n          <TextField\n            id=\"outlined-search\"\n            defaultValue=\"\"\n            type=\"Date\"\n            variant=\"outlined\"\n          />\n          <br />\n          <br />\n          <TextField\n            id=\"outlined-search\"\n            label=\"Venue\"\n            type=\"Venue\"\n            variant=\"outlined\"\n          />\n          <br />\n          <br />\n          <TextField\n            id=\"outlined-multiline-static\"\n            label=\"Description\"\n            multiline\n            rows=\"4\"\n            defaultValue=\"\"\n            variant=\"outlined\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={() => setOpen(false)} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={() => setOpen(false)} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Header } from '../../shared/Header';\nimport { MediaCard } from './MediaCard';\nimport { Loading } from '../../shared/Loading';\nimport { GET_ALL_EVENTS } from '../../../gql/events';\nimport { GET_ME } from '../../../gql/users';\nimport { redirectToLogin } from '../../../functions/redirectToLogin';\nimport { NewEventForm } from '../../shared/NewEventForm';\n\nexport const Homepage = () => {\n  const { loading: meLoading, error: meError, data: userData } = useQuery(\n    GET_ME\n  );\n\n  const {\n    loading: eventsLoading,\n    error: eventsError,\n    data: eventsData\n  } = useQuery(GET_ALL_EVENTS);\n\n  if (meLoading || eventsLoading) {\n    return <Loading />;\n  }\n\n  if (meError) console.log(meError);\n  if (eventsError) console.log(eventsError);\n\n  if (!userData || !userData.me) {\n    return redirectToLogin();\n  }\n\n  const { events } = eventsData;\n\n  return (\n    <>\n      <Header />\n      <NewEventForm />\n      {events.map(event => (\n        <MediaCard key={event.id} event={event} />\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Homepage } from './components/routes/homepage/Homepage';\n\nexport const App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={() => <Homepage />} />\n      </Switch>\n    </Router>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport qs from 'query-string';\nimport { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { persistCache } from 'apollo-cache-persist';\nimport './index.css';\nimport { App } from './App';\nimport { redirectToLogin } from './functions/redirectToLogin';\nimport { Loading } from './components/shared/Loading';\nimport * as serviceWorker from './serviceWorker';\n\nconst Index = () => {\n  const [client, setClient] = useState(undefined);\n\n  useEffect(() => {\n    const authorization = localStorage.getItem('id');\n    const uri =\n      process.env.NODE_ENV === 'development'\n        ? 'http://localhost:4000/graphql'\n        : 'https://phoenix.rctech.club/graphql';\n    const link = new HttpLink({\n      uri,\n      headers: {\n        authorization\n      }\n    });\n\n    const cache = new InMemoryCache();\n    cache.writeData({\n      data: {}\n    });\n\n    const client = new ApolloClient({\n      cache,\n      link\n    });\n\n    persistCache({\n      cache,\n      storage: window.sessionStorage\n    }).then(() => setClient(client));\n  }, []);\n\n  const isIdEmpty = () => {\n    const id = localStorage.getItem('id');\n    return id === '' || id === null || id === undefined;\n  };\n\n  const returnedId = qs.parse(window.location.search)['id'];\n  if (returnedId && returnedId.length > 0) {\n    localStorage.setItem('id', returnedId);\n    window.location.replace('/');\n  }\n\n  if (isIdEmpty()) {\n    return redirectToLogin();\n  }\n\n  if (!client) {\n    return <Loading />;\n  }\n\n  return (\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  );\n};\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}